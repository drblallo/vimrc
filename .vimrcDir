let CMAKE = "/home/massimo/Downloads/clion-2018.2/bin/cmake/linux/bin/cmake"
let CPPCLANG = '/usr/local/bin/clang++'
let NINJA = "Ninja"
let MAKE = "make"
let CCLANG = "/usr/local/bin/clang"
let GCC = "/usr/bin/gcc"
let GPP = "/usr/bin/g++"
let MING_EXTRA = "-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_FIND_ROOT_PATH=/usr/i686-w64-mingw32/ -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY"

let CMAKE_TYPE = 0
let BUILD_DIRECTORY = "cmake-build-debug"
let CPPCOMPILER = g:CPPCLANG
let CCOMPILER = g:CCLANG
let BUILD_TYPE = "Debug"
let EXTRA_CONFIG = "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
let GENERATOR = "Ninja"

let START_DIR = getcwd()
let WRITTEN_FLAG = 0

function! s:switchDir()
	if getcwd() == g:START_DIR
		execute "cd " . g:BUILD_DIRECTORY 
	else
		execute "cd ../"
	endif	
endfunction

function! s:setType(val, cmakeBuildBir, cCompiler, cppCompiler, buildType, extra, generator)
	let g:CMAKE_TYPE = a:val
	let g:BUILD_DIRECTORY = a:cmakeBuildBir
	let g:CCOMPILER = a:cCompiler
	let g:CPPCOMPILER = a:cppCompiler
	let g:BUILD_TYPE = a:buildType
	let g:EXTRA_CONFIG = a:extra
	let g:GENERATOR = a:generator
endfunction

function! s:Rebuild(async)
	let s:command = "cd " . g:BUILD_DIRECTORY . " && " .  g:CMAKE . " -DCMAKE_BUILD_TYPE=" . g:BUILD_TYPE . " -DCMAKE_C_COMPILER=".g:CCOMPILER . " -DCMAKE_CXX_COMPILER=" . g:CPPCOMPILER . " -G " . g:GENERATOR . " " . g:EXTRA_CONFIG . " --build ../"

	silent execute "!rm -r ./" . g:BUILD_DIRECTORY
	silent execute "!mkdir ./" . g:BUILD_DIRECTORY
	if a:async == 1
		execute "AsyncShell echo ".s:command . "; " . s:command
	else
		execute "!echo ".s:command . "; " . s:command
	endif
endfunction

function! s:Run(param, executible, args)

	let s:build = g:CMAKE . " --build " . g:BUILD_DIRECTORY . " --target " . a:param . " -j 4"
	let s:exec = "./" . g:BUILD_DIRECTORY . "/" . a:executible . " " . a:args

	execute "AsyncShell echo " . s:build . "; " .  s:build . " ; echo " . s:exec . " ; " . s:exec

endfunction

function! s:RunD(param, executible, args)

	let s:build = g:CMAKE . " --build " . g:BUILD_DIRECTORY . " --target " . a:param . " -j 4"
	let s:exec = "./" . g:BUILD_DIRECTORY . "/" . a:executible . " " . a:args

	execute "!echo " . s:build . "; " .  s:build 
	execute "ConqueGdb " . s:exec
endfunction

function! s:coverage(val, cmakeBuildBir, cCompiler, cppCompiler, buildType, extra)
	execute "call s:setType(\"" . a:val . "\", \"". a:cmakeBuildBir "\", \"" . a:cCompiler . "\", \"" . a:cppCompiler . "\", \"" . a:buildType . "\", \"" . a:extra "\")"
	silent call s:Rebuild(0)
	let s:build = g:CMAKE . " --build " . g:BUILD_DIRECTORY . " --target runTest -j 4"
	silent execute "!" . s:build
	!./coverage.sh
endfunction

function! s:generateCompilationDatabase()
	silent execute "!rm -r cmake-build-cdatabase/" 
	silent execute "!mkdir cmake-build-cdatabase" 
	silent execute "!rm compile_commands.json"
	execute "!cd cmake-build-cdatabase/ ; " . g:CMAKE . " ../ -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug; mv compile_commands.json ../"
endfunction

function! s:goToTest(name)
	execute "vimgrep " . a:name . " test/src/*"	. " ../test/src/*"
endfunction

command! -nargs=0 CMDEBUG call s:setType(0, "cmake-build-debug-clang", g:CCLANG, g:CPPCLANG, "Debug", "", g:NINJA)
command! -nargs=0 CMRELEASE call s:setType(1, "cmake-build-release-clang", g:CCLANG; g:CPPCLANG, "Release", "", g:NINJA)
command! -nargs=0 CMASAN call s:setType(2, "cmake-build-asan", g:CCLANG, g:CPPCLANG, "Debug", "-DCULT_ASAN=ON", g:NINJA)
command! -nargs=0 CMTSAN call s:setType(3, "cmake-build-tsan", g:CCLANG, g:CPPCLANG, "Debug", "-DCULT_TSAN=ON", g:NINJA)
command! -nargs=0 CMUBSAN call s:setType(4, "cmake-build-ubsan", g:CCLANG, g:CPPCLANG, "Debug", "-DCULT_UBSAN=ON", g:NINJA)
command! -nargs=0 CMMSAN call s:setType(5, "cmake-build-msan", g:CCLANG, g:CPPCLANG, "Debug", "-DCULT_MSAN=ON", g:NINJA)
command! -nargs=0 CMWINDOWS call s:setType(6, "cmake-build-release-windows", "/usr/bin/x86_64-w64-mingw32-gcc-posix", "/usr/bin/x86_64-w64-mingw32-c++-posix", "Release", g:MING_EXTRA, g:NINJA)
command! -nargs=0 COVERAGE call s:coverage(7, "cmake-build-coverage", g:GCC, g:GPP, "Debug", "-DCULT_COVERAGE=ON", g:NINJA)

command! -nargs=0 REBUILD call s:Rebuild(1)
command! -nargs=0 TALL call s:Run("runTest", "test/runTest", "")
command! -nargs=0 TSUIT call s:Run("runTest", "test/runTest", "--gtest_filter=" .expand("<cword>") . ".*") 
command! -nargs=0 TONE call s:Run("runTest", "test/runTest", "--gtest_filter=*." .expand("<cword>")) 
command! -nargs=0 RUN call s:Run("Cult", "Cult", "")
command! -nargs=0 DTALL call s:RunD("runTest", "test/runTest", "")
command! -nargs=0 DTSUIT call s:RunD("runTest", "test/runTest", "--gtest_filter=" .expand("<cword>") . ".*") 
command! -nargs=0 DTONE call s:RunD("runTest", "test/runTest", "--gtest_filter=*." .expand("<cword>")) 
command! -nargs=0 DRUN call s:RunD("Cult", "Cult", "")
command! -nargs=0 CCGENERATE call s:generateCompilationDatabase()
command! -nargs=0 GOTOTEST call s:goToTest(expand("<cword>"))
command! -nargs=0 CHANGEDIR call s:switchDir()

nnoremap gt :vsp<cr>:GOTOTEST<cr>
nnoremap <leader><leader>b :REBUILD<cr>
nnoremap <leader><leader>r :RUN<cr>
nnoremap <leader><leader>dr :DRUN<cr>
nnoremap <leader><leader>ta :TALL<cr>
nnoremap <leader><leader>dta :DTALL<cr>
nnoremap <leader><leader>ts :TSUIT<cr>
nnoremap <leader><leader>dts :DTSUIT<cr>
nnoremap <leader><leader>to :TONE<cr>
nnoremap <leader><leader>dto :DTONE<cr>
nnoremap <leader><leader>s :SyntasticToggleMode<cr>
nnoremap <leader><leader>cd :CHANGEDIR<cr>

